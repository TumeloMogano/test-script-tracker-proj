// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestScriptTracker.Data;

#nullable disable

namespace TestScriptTracker.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8f9a44e9-066d-4301-84ac-eb11d2b578d0"),
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc")
                        },
                        new
                        {
                            UserId = new Guid("8f9a44e9-066d-4301-84ac-eb11d2b578d0"),
                            RoleId = new Guid("22b94730-cc2c-41ac-ab57-6ce3c870a174")
                        },
                        new
                        {
                            UserId = new Guid("8f9a44e9-066d-4301-84ac-eb11d2b578d0"),
                            RoleId = new Guid("0c0f1057-a749-44eb-9bd9-c13d27eaf621")
                        },
                        new
                        {
                            UserId = new Guid("f52582eb-2328-49d2-a338-6a1c1939f86e"),
                            RoleId = new Guid("c6e71fa9-dbbb-46ae-a9be-f95b993497e2")
                        },
                        new
                        {
                            UserId = new Guid("2e363eee-3e03-4182-9242-24422a56a478"),
                            RoleId = new Guid("c6e71fa9-dbbb-46ae-a9be-f95b993497e2")
                        },
                        new
                        {
                            UserId = new Guid("7ef11ac8-94fb-4bdf-a817-2d141e767a1e"),
                            RoleId = new Guid("c6e71fa9-dbbb-46ae-a9be-f95b993497e2")
                        },
                        new
                        {
                            UserId = new Guid("383b0a0b-7e55-47a0-8c5c-ac1d5b290026"),
                            RoleId = new Guid("c6e71fa9-dbbb-46ae-a9be-f95b993497e2")
                        },
                        new
                        {
                            UserId = new Guid("ccd0b41c-ec58-47ce-9d34-72cf573c5fe6"),
                            RoleId = new Guid("c6e71fa9-dbbb-46ae-a9be-f95b993497e2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("Action");

                    b.HasData(
                        new
                        {
                            ActionId = 1,
                            ActionName = "Create"
                        },
                        new
                        {
                            ActionId = 2,
                            ActionName = "Update"
                        },
                        new
                        {
                            ActionId = 3,
                            ActionName = "Delete"
                        });
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNewPassword")
                        .HasMaxLength(255)
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RegStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResetCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResetCodeExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserContactNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserEmailAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserIDNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegStatusId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f9a44e9-066d-4301-84ac-eb11d2b578d0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0924880a-3d61-4462-899d-0edce6efc9a6",
                            Email = "super@tst.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsNewPassword = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@TST.COM",
                            NormalizedUserName = "SUPERADMIN500",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcX/Ig6QVWGH2bjwPti7RjGtzltJl+tm5OwTZAjCzSfZvMhxqvR7ePvXM736oOzvA==",
                            PhoneNumberConfirmed = false,
                            RegStatusId = 4,
                            RegistrationCode = "SARTX",
                            RegistrationDate = new DateTime(2025, 1, 25, 12, 53, 23, 510, DateTimeKind.Local).AddTicks(2387),
                            SecurityStamp = "5e50c31f-6984-48cc-a942-d251dcf6dcaa",
                            TwoFactorEnabled = false,
                            UserContactNumber = "0124567899",
                            UserEmailAddress = "super@tst.com",
                            UserFirstName = "Carlton",
                            UserIDNumber = "0205086094083",
                            UserName = "SuperAdmin500",
                            UserSurname = "Banks"
                        },
                        new
                        {
                            Id = new Guid("f52582eb-2328-49d2-a338-6a1c1939f86e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04b65960-b1a3-46be-8271-17501169e4be",
                            Email = "u21496529@tuks.co.za",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsNewPassword = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "U21496529@TUKS.CO.ZA",
                            NormalizedUserName = "TUMELOMOGANO105",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXZgLRxycgraNZRrccnw1KuOT0ERDxQoIRekJwhl41wOvypchYFcnMZhcUyFZGyHQ==",
                            PhoneNumberConfirmed = false,
                            RegStatusId = 4,
                            RegistrationCode = "10050",
                            RegistrationDate = new DateTime(2025, 1, 25, 12, 53, 23, 581, DateTimeKind.Local).AddTicks(5678),
                            SecurityStamp = "84b09b11-f4e3-4a6e-9eca-b12eff69075d",
                            TwoFactorEnabled = false,
                            UserContactNumber = "0124567899",
                            UserEmailAddress = "u21496529@tuks.co.za",
                            UserFirstName = "Tumelo",
                            UserIDNumber = "0205086094083",
                            UserName = "TumeloMogano105",
                            UserSurname = "Mogano"
                        },
                        new
                        {
                            Id = new Guid("2e363eee-3e03-4182-9242-24422a56a478"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d2f32aa-b8aa-44f8-b605-d71e8d73d1b7",
                            Email = "u21486507@tuks.co.za",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsNewPassword = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "U21486507@TUKS.CO.ZA",
                            NormalizedUserName = "KAMOGELOMALATSI551",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdev1uQ2/1JlWjgkB0+MP7P8bSoD2xC7Rrb+X1Qbp4oxB05//on5piytRxCmIN39A==",
                            PhoneNumberConfirmed = false,
                            RegStatusId = 4,
                            RegistrationCode = "LLR45",
                            RegistrationDate = new DateTime(2025, 1, 25, 12, 53, 23, 661, DateTimeKind.Local).AddTicks(7999),
                            SecurityStamp = "0e45af7e-9977-41f6-9206-59f72da9102f",
                            TwoFactorEnabled = false,
                            UserContactNumber = "0622383477",
                            UserEmailAddress = "u21486507@tuks.co.za",
                            UserFirstName = "Kamogelo",
                            UserIDNumber = "0205086094083",
                            UserName = "KamogeloMalatsi551",
                            UserSurname = "Malatsi"
                        },
                        new
                        {
                            Id = new Guid("7ef11ac8-94fb-4bdf-a817-2d141e767a1e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66d2c895-5c65-43d8-95e5-3a8124ae21a6",
                            Email = "u21429032@tuks.co.za",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsNewPassword = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "U21429032@TUKS.CO.ZA",
                            NormalizedUserName = "ISMAILCARIM012",
                            PasswordHash = "AQAAAAIAAYagAAAAEAokpZBsIfyWu/AkCEUGdHr0S0ro0vY/jVHabenuI6fRNtN6hwzU1C160sbOwnR8FA==",
                            PhoneNumberConfirmed = false,
                            RegStatusId = 4,
                            RegistrationCode = "3GH51",
                            RegistrationDate = new DateTime(2025, 1, 25, 12, 53, 23, 739, DateTimeKind.Local).AddTicks(3893),
                            SecurityStamp = "7cc73f00-e251-4805-b7f3-422ee03a1d9e",
                            TwoFactorEnabled = false,
                            UserContactNumber = "0729790966",
                            UserEmailAddress = "u21429032@tuks.co.za",
                            UserFirstName = "Ismail",
                            UserIDNumber = "0205086094083",
                            UserName = "IsmailCarim012",
                            UserSurname = "Carim"
                        },
                        new
                        {
                            Id = new Guid("383b0a0b-7e55-47a0-8c5c-ac1d5b290026"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27117262-ed7a-44e6-bc77-2992a02ac003",
                            Email = "u21438383@tuks.co.za",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsNewPassword = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "U21438383@TUKS.CO.ZA",
                            NormalizedUserName = "NOSIPHOZWANE992",
                            PasswordHash = "AQAAAAIAAYagAAAAEF0GgChZDj0pBCUIBptfdWNc+NkPeO07WTnOp8/S0ZaGctTcAlgVz8djFhUMHdRykw==",
                            PhoneNumberConfirmed = false,
                            RegStatusId = 4,
                            RegistrationCode = "NZ020",
                            RegistrationDate = new DateTime(2025, 1, 25, 12, 53, 23, 809, DateTimeKind.Local).AddTicks(7326),
                            SecurityStamp = "3c3dbb20-88c0-4865-a157-0e2cabe0d7b7",
                            TwoFactorEnabled = false,
                            UserContactNumber = "0614078955",
                            UserEmailAddress = "u21438383@tuks.co.za",
                            UserFirstName = "Nosipho",
                            UserIDNumber = "0205086094083",
                            UserName = "NosiphoZwane992",
                            UserSurname = "Zwane"
                        },
                        new
                        {
                            Id = new Guid("ccd0b41c-ec58-47ce-9d34-72cf573c5fe6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91113f11-0fa8-49bf-b25b-723771631f1f",
                            Email = "u21555070@tuks.co.za",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsNewPassword = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "U21555070@TUKS.CO.ZA",
                            NormalizedUserName = "LERATOFANI355",
                            PasswordHash = "AQAAAAIAAYagAAAAEDQ0ph67n2L6rcJ/DFmUOZQKjHRGazEPOSz2sIcUhfJ608sbdyBssucX35AQe/YK3A==",
                            PhoneNumberConfirmed = false,
                            RegStatusId = 4,
                            RegistrationCode = "LF402",
                            RegistrationDate = new DateTime(2025, 1, 25, 12, 53, 23, 879, DateTimeKind.Local).AddTicks(4340),
                            SecurityStamp = "8c85d29e-2023-4901-8833-95dea60ce970",
                            TwoFactorEnabled = false,
                            UserContactNumber = "0633621013",
                            UserEmailAddress = "u21555070@tuks.co.za",
                            UserFirstName = "Lerato",
                            UserIDNumber = "0205086094083",
                            UserName = "LeratoFani355",
                            UserSurname = "Fani"
                        });
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.AuditLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogId");

                    b.HasIndex("ActionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressStreetName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AddressStreetNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ClientNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ClientRegistrationNr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("ClientId");

                    b.HasIndex("CityId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ClientRepresentative", b =>
                {
                    b.Property<Guid>("ClientRepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RepContactNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RepEmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepIDNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("RepName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RepSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientRepId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ClientRepresentatives");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ColourScheme", b =>
                {
                    b.Property<Guid>("ColourSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ColourSchemeId");

                    b.HasIndex("ThemeId");

                    b.ToTable("ColourSchemes");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentLine")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<Guid>("TestScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("TestScriptId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Defect", b =>
                {
                    b.Property<Guid>("DefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLogged")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefectDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DefectImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefectStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TestScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DefectId");

                    b.HasIndex("DefectStatusId");

                    b.HasIndex("TestScriptId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.DefectStatus", b =>
                {
                    b.Property<int>("DefectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefectStatusId"));

                    b.Property<string>("DefectStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DefectStatusId");

                    b.ToTable("DefectStatus");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.DownloadReportHistory", b =>
                {
                    b.Property<Guid>("DownloadRHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DownloadRName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DownloadRHistId");

                    b.HasIndex("UserId");

                    b.ToTable("DownloadReportHistory");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.EventParticipants", b =>
                {
                    b.Property<Guid>("EventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventParticipantId");

                    b.HasIndex("ScheduleEventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Font", b =>
                {
                    b.Property<int>("FontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FontId"));

                    b.Property<string>("FontName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FontId");

                    b.ToTable("Fonts");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Help", b =>
                {
                    b.Property<int>("HelpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelpId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HelpId");

                    b.ToTable("Help");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.HelpPage", b =>
                {
                    b.Property<int>("HelpPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelpPageID"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HelpPageID");

                    b.ToTable("HelpPage");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Logo", b =>
                {
                    b.Property<Guid>("LogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogoId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"));

                    b.Property<string>("NotificationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("e2ad3897-a644-4e41-bf95-22fcd17ad951"),
                            PermissionDescription = "None",
                            PermissionName = "None"
                        },
                        new
                        {
                            PermissionId = new Guid("ccb44a5d-1167-4ba9-9148-29244da6bee8"),
                            PermissionDescription = "Grants users the ability to access and view detailed client information. This permission is essential for users who need to view or monitor client relationships without management capabilities.",
                            PermissionName = "canViewClients"
                        },
                        new
                        {
                            PermissionId = new Guid("b1d851f1-b097-4d4b-a567-c441e495df2e"),
                            PermissionDescription = "Grants users the ability to access and view detailed project information. This permission is essential for users who need to view or monitor project relationships without management capabilities.",
                            PermissionName = "canViewProjects"
                        },
                        new
                        {
                            PermissionId = new Guid("35f0935b-357b-42f8-970d-cc8691e6c3de"),
                            PermissionDescription = "Grants users the ability to access and view detailed role information. This permission is essential for users who need to view or monitor roles without management capabilities.",
                            PermissionName = "canViewRoles"
                        },
                        new
                        {
                            PermissionId = new Guid("872eb33b-f2ca-4e97-b1e3-26af66258992"),
                            PermissionDescription = "Grants users the ability to access and view detailed user information. This permission is essential for users who need to view or monitor user relationships without management capabilities.",
                            PermissionName = "canViewUsers"
                        },
                        new
                        {
                            PermissionId = new Guid("c0bb6b29-c46a-47bd-9627-eb17c7c64945"),
                            PermissionDescription = "Grants users the ability to access and view detailed team information. This permission is essential for users who need to view or monitor team relationships without management capabilities.",
                            PermissionName = "canViewTeams"
                        },
                        new
                        {
                            PermissionId = new Guid("35bc0f67-948f-47ee-ac1f-16a5d66cfb34"),
                            PermissionDescription = "Grants users the ability to access and view template information. This permission is will allow users to view or monitor templates without management capabilities.",
                            PermissionName = "canViewTemplates"
                        },
                        new
                        {
                            PermissionId = new Guid("e9d2b1b2-75ce-4dd7-bb10-a387e6cd1867"),
                            PermissionDescription = "Grants users the ability to access and view Status & Tag information. This permission is will allow users to view or monitor statuses and tags without management capabilities.",
                            PermissionName = "canViewStatusesTags"
                        },
                        new
                        {
                            PermissionId = new Guid("d9314247-33c1-4ddd-849f-ea01275286ad"),
                            PermissionDescription = "Grants users the ability to create or modify client details, manage associated relationships and oversee client relationships within the system. This permission will provide users with more management capabilities.",
                            PermissionName = "canManageClients"
                        },
                        new
                        {
                            PermissionId = new Guid("03071ec4-2b96-4032-b654-95062bf23668"),
                            PermissionDescription = "Enables users to create or modify projects, as well as assign and track project resources. This permission will provide users with more management capabilities.",
                            PermissionName = "canManageProjects"
                        },
                        new
                        {
                            PermissionId = new Guid("056af7d9-db22-4cb1-a4de-9dfc929f905f"),
                            PermissionDescription = "Grants users the ability to create, define or modify roles within the system, This permission will allow users to oversee the addition and management of roles ",
                            PermissionName = "canManageRoles"
                        },
                        new
                        {
                            PermissionId = new Guid("e829b580-2c00-498c-abb0-8efcd2dfce74"),
                            PermissionDescription = "Provides users with the ability to view, track and oversee the general users on the system. This permission will provide users with user management capabilities.",
                            PermissionName = "canManageUsers"
                        },
                        new
                        {
                            PermissionId = new Guid("25dd9b57-a363-4e10-9f8b-57f6c7263acb"),
                            PermissionDescription = "Enables users to create, modify and disband teams, as well as assign team members. This permission facilitates the management of team structures.",
                            PermissionName = "canManageTeams"
                        },
                        new
                        {
                            PermissionId = new Guid("9531b3a3-9f00-4e49-a2e8-f2366a3f5382"),
                            PermissionDescription = "Grants the ability to define, modify and oversee statuses and tags for categorization and progress tracking within the system",
                            PermissionName = "canManageStatusesTags"
                        },
                        new
                        {
                            PermissionId = new Guid("585ab6a7-f9ea-48b2-80f9-dae55dc26f82"),
                            PermissionDescription = "Provides users with the ability to create or modify test scripts, including the management capabilities for test steps and related documentation.",
                            PermissionName = "canManageTestScripts"
                        },
                        new
                        {
                            PermissionId = new Guid("e67c95ce-97a5-4ce7-b0c5-70994bf2aaeb"),
                            PermissionDescription = "Enables users to create or modify templates, which serve as standardized formats for various possible test cases. This permission provides management capabilities for templates.",
                            PermissionName = "canManageTemplates"
                        },
                        new
                        {
                            PermissionId = new Guid("0cbd13af-1b5c-404c-828b-510bfb6df98e"),
                            PermissionDescription = "Grants users the authority to assign, change and remove roles from users. This permission is essential for maintaining role-based-permision access control.",
                            PermissionName = "canManageUserRoles"
                        },
                        new
                        {
                            PermissionId = new Guid("98c4cd42-031f-4210-8316-b1eed5e245d7"),
                            PermissionDescription = "Provides the ability to define and modify permission sets given to roles, ensuring the right levels of access and control. This permission os critical for system security and role management.",
                            PermissionName = "canManagePermissionRoles"
                        },
                        new
                        {
                            PermissionId = new Guid("b23301b3-dc46-4c46-85ab-3682fc95b9fe"),
                            PermissionDescription = "Provides full, unrestricted access to all system functionalities. Users with this permission will be granted the highest level of access to all resources on the system.",
                            PermissionName = "SystemAdministrator"
                        });
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Phase", b =>
                {
                    b.Property<int>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhaseId"));

                    b.Property<string>("PhaseDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PhaseId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResponsibleClientRep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SignedOff")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SignedOffDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.RegistrationStatus", b =>
                {
                    b.Property<int>("RegStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegStatusId"));

                    b.Property<string>("RegStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegStatusId");

                    b.ToTable("RegistrationStatus");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            ConcurrencyStamp = "4fbc224d-acae-4293-93f4-8b1dcaed67bc",
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            RoleDescription = "Access Control configuration for Super Admin"
                        },
                        new
                        {
                            Id = new Guid("22b94730-cc2c-41ac-ab57-6ce3c870a174"),
                            ConcurrencyStamp = "22b94730-cc2c-41ac-ab57-6ce3c870a174",
                            IsDeleted = false,
                            Name = "Tester",
                            NormalizedName = "TESTER",
                            RoleDescription = "Access Control configuration for Testers"
                        },
                        new
                        {
                            Id = new Guid("0c0f1057-a749-44eb-9bd9-c13d27eaf621"),
                            ConcurrencyStamp = "0c0f1057-a749-44eb-9bd9-c13d27eaf621",
                            IsDeleted = false,
                            Name = "Developer",
                            NormalizedName = "DEVELOPER",
                            RoleDescription = "Access Control configuration for Developers"
                        },
                        new
                        {
                            Id = new Guid("c6e71fa9-dbbb-46ae-a9be-f95b993497e2"),
                            ConcurrencyStamp = "c6e71fa9-dbbb-46ae-a9be-f95b993497e2",
                            IsDeleted = false,
                            Name = "CoreUser",
                            NormalizedName = "COREUSER",
                            RoleDescription = "Access Control configuration for Core Users"
                        },
                        new
                        {
                            Id = new Guid("e6631a13-ce21-4b2c-ab8e-3dd6f0103987"),
                            ConcurrencyStamp = "e6631a13-ce21-4b2c-ab8e-3dd6f0103987",
                            IsDeleted = false,
                            Name = "Auditor",
                            NormalizedName = "AUDITOR",
                            RoleDescription = "Access Control configuration for System Auditors"
                        });
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("ccb44a5d-1167-4ba9-9148-29244da6bee8")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("b1d851f1-b097-4d4b-a567-c441e495df2e")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("35f0935b-357b-42f8-970d-cc8691e6c3de")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("872eb33b-f2ca-4e97-b1e3-26af66258992")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("c0bb6b29-c46a-47bd-9627-eb17c7c64945")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("35bc0f67-948f-47ee-ac1f-16a5d66cfb34")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("e9d2b1b2-75ce-4dd7-bb10-a387e6cd1867")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("d9314247-33c1-4ddd-849f-ea01275286ad")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("03071ec4-2b96-4032-b654-95062bf23668")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("056af7d9-db22-4cb1-a4de-9dfc929f905f")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("e829b580-2c00-498c-abb0-8efcd2dfce74")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("25dd9b57-a363-4e10-9f8b-57f6c7263acb")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("9531b3a3-9f00-4e49-a2e8-f2366a3f5382")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("585ab6a7-f9ea-48b2-80f9-dae55dc26f82")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("e67c95ce-97a5-4ce7-b0c5-70994bf2aaeb")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("0cbd13af-1b5c-404c-828b-510bfb6df98e")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("98c4cd42-031f-4210-8316-b1eed5e245d7")
                        },
                        new
                        {
                            RoleId = new Guid("4fbc224d-acae-4293-93f4-8b1dcaed67bc"),
                            PermissionId = new Guid("b23301b3-dc46-4c46-85ab-3682fc95b9fe")
                        });
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ScheduleEvent", b =>
                {
                    b.Property<Guid>("ScheduleEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EventTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EventTimeStart")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduleEventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduleEventName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleEventId");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduleEvents");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusTypeId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.StatusType", b =>
                {
                    b.Property<int>("StatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusTypeId"));

                    b.Property<string>("StatusTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StatusTypeId");

                    b.ToTable("StatusTypes");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.StepResult", b =>
                {
                    b.Property<int>("StepResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepResultId"));

                    b.Property<string>("StepResultName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StepResultId");

                    b.ToTable("StepResults");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TagDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TagTypeId")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TagType", b =>
                {
                    b.Property<int>("TagTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagTypeId"));

                    b.Property<string>("TagtypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagTypeId");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TeamDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TeamMembers", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsTeamLead")
                        .HasColumnType("bit");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Template", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TempCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TempStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TemplateTest")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TemplateId");

                    b.HasIndex("TempStatusId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TemplateStatus", b =>
                {
                    b.Property<int>("TempStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempStatusId"));

                    b.Property<string>("TempStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TempStatusId");

                    b.ToTable("TemplateStatus");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TemplateTestStep", b =>
                {
                    b.Property<Guid>("TempTestStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TempAdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempTestStep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempTestStepData")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TempTestStepDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TempTestStepRole")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TempTestStepId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateTestSteps");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScript", b =>
                {
                    b.Property<Guid>("TestScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateReviewed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Test")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TestScriptDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("TestScriptId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TestScripts");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScriptAssignment", b =>
                {
                    b.Property<Guid>("TestScriptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("TestScriptId", "TeamId", "UserId");

                    b.HasIndex("TeamId", "UserId");

                    b.ToTable("TestScriptAssignments");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScriptTags", b =>
                {
                    b.Property<Guid>("TestScriptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("TestScriptId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TestScriptTags");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestStep", b =>
                {
                    b.Property<Guid>("TestStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedOutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feedback")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("StepResultId")
                        .HasColumnType("int");

                    b.Property<string>("TestData")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TestScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestStepDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TestStepName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestStepRole")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TestStepId");

                    b.HasIndex("StepResultId");

                    b.HasIndex("TestScriptId");

                    b.ToTable("TestSteps");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Theme", b =>
                {
                    b.Property<Guid>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FontId")
                        .HasColumnType("int");

                    b.Property<int>("FontSize")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ThemeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FontId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.AppUser", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.RegistrationStatus", "RegistrationStatus")
                        .WithMany("Users")
                        .HasForeignKey("RegStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationStatus");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.AuditLog", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Action", "Action")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.City", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Region", "Regions")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Client", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ClientRepresentative", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Client", "Client")
                        .WithMany("ClientRepresentatives")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "User")
                        .WithOne("ClientRepresentative")
                        .HasForeignKey("TestScriptTracker.Models.Domain.ClientRepresentative", "UserId");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ColourScheme", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Theme", "Theme")
                        .WithMany("ColourSchemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Comment", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.TestScript", "TestScript")
                        .WithMany("Comments")
                        .HasForeignKey("TestScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestScript");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Defect", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.DefectStatus", "DefectStatus")
                        .WithMany("Defects")
                        .HasForeignKey("DefectStatusId");

                    b.HasOne("TestScriptTracker.Models.Domain.TestScript", "TestScript")
                        .WithMany("Defects")
                        .HasForeignKey("TestScriptId");

                    b.Navigation("DefectStatus");

                    b.Navigation("TestScript");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.DownloadReportHistory", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "User")
                        .WithMany("DownloadReportHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.EventParticipants", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.ScheduleEvent", "ScheduleEvent")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ScheduleEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Logo", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Theme", "Theme")
                        .WithMany("Logos")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Notification", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "Users")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users");

                    b.HasOne("TestScriptTracker.Models.Domain.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId");

                    b.Navigation("NotificationType");

                    b.Navigation("Project");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Project", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.Phase", "Phase")
                        .WithMany("Projects")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId");

                    b.Navigation("Client");

                    b.Navigation("Phase");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Region", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.RolePermission", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ScheduleEvent", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "User")
                        .WithMany("ScheduleEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Status", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Project", "Projects")
                        .WithMany("Statuses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.StatusType", "StatusType")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Tag", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.TagType", "TagType")
                        .WithMany("Tag")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TeamMembers", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.AppUser", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Template", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.TemplateStatus", "TemplateStatus")
                        .WithMany("Templates")
                        .HasForeignKey("TempStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateStatus");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TemplateTestStep", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Template", "Template")
                        .WithMany("TemplateTestSteps")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScript", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Project", "Project")
                        .WithMany("TestScripts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.StatusType", "StatusType")
                        .WithMany("TestScripts")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.Template", "Template")
                        .WithMany("TestScripts")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("StatusType");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScriptAssignment", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.TestScript", "TestScript")
                        .WithMany("TestScriptAssignment")
                        .HasForeignKey("TestScriptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.TeamMembers", "TeamMembers")
                        .WithMany("TestScriptAssignment")
                        .HasForeignKey("TeamId", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeamMembers");

                    b.Navigation("TestScript");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScriptTags", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Tag", "Tag")
                        .WithMany("TestScriptTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.TestScript", "TestScript")
                        .WithMany("TestScriptTags")
                        .HasForeignKey("TestScriptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TestScript");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestStep", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.StepResult", "StepResult")
                        .WithMany("TestSteps")
                        .HasForeignKey("StepResultId");

                    b.HasOne("TestScriptTracker.Models.Domain.TestScript", "TestScript")
                        .WithMany("TestSteps")
                        .HasForeignKey("TestScriptId");

                    b.Navigation("StepResult");

                    b.Navigation("TestScript");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Theme", b =>
                {
                    b.HasOne("TestScriptTracker.Models.Domain.Client", "Client")
                        .WithMany("Themes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestScriptTracker.Models.Domain.Font", "Font")
                        .WithMany("Themes")
                        .HasForeignKey("FontId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Font");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Action", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.AppUser", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ClientRepresentative");

                    b.Navigation("DownloadReportHistory");

                    b.Navigation("EventParticipants");

                    b.Navigation("ScheduleEvents");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.City", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Client", b =>
                {
                    b.Navigation("ClientRepresentatives");

                    b.Navigation("Projects");

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.DefectStatus", b =>
                {
                    b.Navigation("Defects");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Font", b =>
                {
                    b.Navigation("Themes");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Phase", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Project", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Statuses");

                    b.Navigation("TestScripts");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.RegistrationStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.ScheduleEvent", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.StatusType", b =>
                {
                    b.Navigation("Statuses");

                    b.Navigation("TestScripts");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.StepResult", b =>
                {
                    b.Navigation("TestSteps");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Tag", b =>
                {
                    b.Navigation("TestScriptTags");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TagType", b =>
                {
                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TeamMembers", b =>
                {
                    b.Navigation("TestScriptAssignment");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Template", b =>
                {
                    b.Navigation("TemplateTestSteps");

                    b.Navigation("TestScripts");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TemplateStatus", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.TestScript", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Defects");

                    b.Navigation("TestScriptAssignment");

                    b.Navigation("TestScriptTags");

                    b.Navigation("TestSteps");
                });

            modelBuilder.Entity("TestScriptTracker.Models.Domain.Theme", b =>
                {
                    b.Navigation("ColourSchemes");

                    b.Navigation("Logos");
                });
#pragma warning restore 612, 618
        }
    }
}
