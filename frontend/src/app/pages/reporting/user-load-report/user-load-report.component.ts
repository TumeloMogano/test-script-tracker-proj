import { Component, OnInit } from '@angular/core';
import { ReportService } from '../../../services/report/report.service';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { ConfirmationService, MessageService } from 'primeng/api';
import { AuthUser } from '../../../models/auth/auth.model';
import { AuthService } from '../../../services/auth/auth.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-user-load-report',
  templateUrl: './user-load-report.component.html',
  styleUrls: ['./user-load-report.component.scss']
})
export class UserLoadReportComponent implements OnInit {
  user$: Observable<AuthUser | null>;
  loggedInUser: AuthUser | null = null;

  reports: any[] = [];
  filteredReports: any[] = [];
  searchTeam: string = '';
  searchProject: string = '';
  page: number = 1;
  sortOrder: { key: string, ascending: boolean } = { key: '', ascending: true };
  
  teamSuggestions: string[] = [];
  projectSuggestions: string[] = [];
  allTeams: string[] = [];
  allProjects: string[] = [];

  constructor(
    private reportService: ReportService,
    private confirmationService: ConfirmationService,
    private messageService: MessageService,
    private authService: AuthService
  ) {
    this.user$ = this.authService.userDetails$;
  }

  ngOnInit(): void {
    this.fetchReports();
    this.fetchTeams();
    this.fetchProjects();
    this.authService.userDetails$.subscribe(user => {
      this.loggedInUser = user;
    });
  }

  fetchReports(): void {
    this.reportService.getUserLoadReport().subscribe((data: any[]) => {
      this.reports = data;
      this.filteredReports = data;
    });
  }

  fetchTeams(): void {
    this.reportService.getAllTeams().subscribe((data: any[]) => {
      this.allTeams = data.map(team => team.teamName); 
    });
  }

  fetchProjects(): void {
    this.reportService.getProjects().subscribe((data: any[]) => {
      this.allProjects = data.map(project => project.projectName); 
    });
  }

  applyFilters(): void {
    this.filteredReports = this.reports.filter(report =>
      (!this.searchTeam || report.teamNames.some((teamName: string) => teamName.toLowerCase().includes(this.searchTeam.toLowerCase()))) &&
      (!this.searchProject || report.projectNames.some((projectName: string) => projectName.toLowerCase().includes(this.searchProject.toLowerCase())))
    );
    this.sortReports();
  }

  clearFilters(): void {
    this.searchTeam = '';
    this.searchProject = '';
    this.filteredReports = [...this.reports];
  }

  setOrder(key: string, ascending: boolean): void {
    this.sortOrder = { key, ascending };
    this.sortReports();
  }

  sortReports(): void {
    this.filteredReports.sort((a, b) => {
      const valueA = a[this.sortOrder.key];
      const valueB = b[this.sortOrder.key];

      if (valueA < valueB) {
        return this.sortOrder.ascending ? -1 : 1;
      } else if (valueA > valueB) {
        return this.sortOrder.ascending ? 1 : -1;
      } else {
        return 0;
      }
    });
  }


  exportToPDF(): void {
    this.confirmationService.confirm({
      header: 'Confirmation',
      message: 'Are you sure you want to export this report?',
      accept: () => {
        const doc = new jsPDF();
        const currentTime = new Date();
        const date = currentTime.toLocaleDateString().replace(/\//g, '-');
        const time = currentTime.toLocaleTimeString().replace(/:/g, '-');
  
        const generatedBy = this.loggedInUser ? `${this.loggedInUser.firstName} ${this.loggedInUser.surname}` : 'Unknown User';
  
        const projectFilter = this.searchProject ? `Project: ${this.searchProject}` : null;
        const teamFilter = this.searchTeam ? `Team: ${this.searchTeam}` : null;
        let filtersText = 'No filters applied';
  
        if (projectFilter || teamFilter) {
          filtersText = 'Applied Filters: ';
          if (projectFilter) {
            filtersText += projectFilter;
          }
          if (teamFilter) {
            filtersText += projectFilter ? `, ${teamFilter}` : teamFilter;
          }
        }
  
        const img = new Image();
        img.src = 'assets/company-logo.png';
        img.onload = () => {
          doc.addImage(img, 'PNG', 10, 10, 50, 20);
          doc.setFont('Arial');
          doc.setFontSize(18);
          doc.text('EPI-USE Africa', 70, 20);
          doc.setFontSize(10);
          doc.text(`Generated on:`, 70, 25);
          doc.text(`Date: ${date} Time: ${time}`, 70, 30);
          doc.text(`Report generated by: ${generatedBy}`, 70, 35);
  
          doc.setLineWidth(0.5);
          doc.line(10, 40, 200, 40);
  
          doc.setFontSize(14);
          doc.setFont('Arial', 'bold');
          doc.text('User Load Report', 10, 45);
  
          doc.setFontSize(11);
          doc.setFont('Arial', 'normal');
          doc.text(filtersText, 10, 50);
  
          doc.setFontSize(12);
          doc.setFont('Arial', 'bold');
          doc.text('User Load List', 10, 60);
  
          (doc as any).autoTable({
            startY: 65,
            head: [['User Name', 'Number of Teams', 'Team Names', 'Number of Active Projects', 'Project Names', 'Number of Test Scripts']],
            body: this.filteredReports.map(report => [
              report.userName,
              report.numberOfTeams,
              report.teamNames.join('\n'),
              report.numberOfActiveProjects,
              report.projectNames.join('\n'),
              report.numberOfTestScripts
            ]),
            headStyles: { fillColor: [0, 24, 68] },
            didDrawPage: (data: any) => {
              const pageSize = (doc as any).internal.pageSize;
              const pageHeight = pageSize.height ? pageSize.height : pageSize.getHeight();
              doc.setFontSize(10);
              doc.setFont('Arial', 'normal');
              doc.text('Generated from the Test Script Tracker Application', data.settings.margin.left, pageHeight - 10);
              doc.text(`Page ${data.pageNumber}`, pageSize.width - data.settings.margin.right - 10, pageHeight - 10);
            }
          });
  
          doc.save(`UserLoadReport_${date}_${time}.pdf`);
          this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Report exported successfully', key: 'bc' });
        };
      },
      reject: () => {
        this.messageService.add({ severity: 'info', summary: 'Cancelled', detail: 'Export cancelled', key: 'bc' });
      }
    });
  }

  filterTeams(event: any): void {
    this.teamSuggestions = this.allTeams.filter(team => team.toLowerCase().includes(event.query.toLowerCase()));
  }

  filterProjects(event: any): void {
    this.projectSuggestions = this.allProjects.filter(project => project.toLowerCase().includes(event.query.toLowerCase()));
  }
}


